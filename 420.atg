#include "SymbolTable.h"
#include "CodeGenerator.h"
#include "wchar.h"

COMPILER Four20

	SymbolTable   *tab;
	CodeGenerator *gen;
	
	int // operators
	  plus, minus, times, slash, equ, lss, gtr;

	int // types
	  undef, integer, boolean;

	int // object kinds
	  var, proc;

	int // opcodes
	  ADD,  SUB,   MUL,   DIV,   EQU,  LSS, GTR, NEG,
	  LOAD, LOADG, STO,   STOG,  CONST,
	  CALL, RET,   ENTER, LEAVE,
	  JMP,  FJMP,  READ,  WRITE; 
	
	void InitDeclarations() { // it must exist
		plus = 0; minus = 1; times = 2; slash = 3; equ = 4; lss = 5; gtr = 6; // operators
		undef = 0; integer = 1; boolean = 2; // types
		var = 0; proc = 1; // object kinds

		// opcodes
		ADD  =  0; SUB   =  1; MUL   =  2; DIV   =  3; EQU   =  4; LSS = 5; GTR = 6; NEG = 7;
		LOAD =  8; LOADG =  9; STO   = 10; STOG  = 11; CONST = 12;
		CALL = 13; RET   = 14; ENTER = 15; LEAVE = 16;
		JMP  = 17; FJMP  = 18; READ  = 19; WRITE = 20;
	}
	
/*--------------------------------------------------------------------------*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  CharInLine = ANY - '\r' - '\n'.
  AnyButDoubleQuote = CharInLine - '\"'.

TOKENS
  idenToken = letter { letter | digit } .
  character = '\'' letter | digit '\''.
  number = digit {digit}.
  variable = "#" letter { letter | digit | "_" }.
  string = '"' {AnyButDoubleQuote} '"'.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO cr lf

IGNORE cr + lf + tab



PRODUCTIONS
factor = (. wchar_t* name; .)
(character | variable | string | number | identifier<name>) .
/*------------------------------------------------------------------------*/
identifier<wchar_t* &name> = idenToken (. name = coco_string_create(t->val); .) .
/*------------------------------------------------------------------------*/
additationOperator = "+" | "-" .
/*------------------------------------------------------------------------*/
multiplyOperator = "*" | "/" .
/*------------------------------------------------------------------------*/
relationalOperator = "==" | "!=" | ">" | "<" .
/*------------------------------------------------------------------------*/
simpleExpression = additationOperator factor | multiplyOperator factor | relationalOperator factor .
/*------------------------------------------------------------------------*/
expression = factor { simpleExpression } .
/*------------------------------------------------------------------------*/
ifStatement = "jeigu" expression statement [ "kitaip" statement ] .
/*------------------------------------------------------------------------*/
statement = declaration | variable "=" expression ";" | ifStatement | forStatement | procedureStatement .
/*------------------------------------------------------------------------*/
Four20 = (. InitDeclarations(); tab->OpenScope(); .)
{define} { declaration } { procedureDeclaration } 
(. tab->CloseScope(); .).
/*------------------------------------------------------------------------*/
typeSpecifier = ("char" | "string" | "int").
/*------------------------------------------------------------------------*/
declaration	 = typeSpecifier variable [ "=" expression ] ';'.
/*------------------------------------------------------------------------*/
procedureDeclaration = (. wchar_t* name; Obj *obj; .)
"procedura"
identifier<name> (. obj = tab->NewObj(name, proc, undef); tab->OpenScope(); .)
"(" {typeSpecifier variable } ")" "{" { statement } "}"
(. tab->CloseScope(); .).
/*------------------------------------------------------------------------*/
procedureStatement = (. wchar_t* name; .)
identifier<name> "(" { factor } ")" ";".
/*------------------------------------------------------------------------*/
forStatement = "nuo" variable [ "=" expression ] "iki" expression "daryti" statement statement .
/*------------------------------------------------------------------------*/
define = (. wchar_t* name; .)
"#define" identifier<name> factor .

END Four20.
